# -*- coding: utf-8 -*-
"""vitmodel copy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0Lsflx_uYN-UO9Ybcp8cCVYlTTkBgQj
"""

!pip install -q datasets transformers accelerate

from google.colab import drive
drive.mount('/content/drive')

import os

os.chdir("/content/drive/MyDrive/assignment")

from datasets import load_dataset

data = load_dataset('data')
# data

from datasets import load_metric

metric = load_metric("accuracy")

data["train"].features

data["train"].features["label"]

labels = data["train"].features["label"].names
label2id, id2label = dict(), dict()
for i, label in enumerate(labels):
    label2id[label] = i
    id2label[i] = label

id2label[2]

from transformers import AutoImageProcessor

model_name = 'google/vit-base-patch16-224-in21k'
image_processor  = AutoImageProcessor.from_pretrained(model_name)
image_processor

from transformers import ViTImageProcessor

model_name_or_path = 'google/vit-base-patch16-224-in21k'
processor = ViTImageProcessor.from_pretrained(model_name_or_path)

from torchvision.transforms import (
    CenterCrop,
    Compose,
    Normalize,
    RandomHorizontalFlip,
    RandomResizedCrop,
    Resize,
    ToTensor,
)

normalize = Normalize(mean=image_processor.image_mean, std=image_processor.image_std)
if "height" in image_processor.size:
    size = (image_processor.size["height"], image_processor.size["width"])
    crop_size = size
    max_size = None
elif "shortest_edge" in image_processor.size:
    size = image_processor.size["shortest_edge"]
    crop_size = (size, size)
    max_size = image_processor.size.get("longest_edge")

train_transforms = Compose(
        [
            RandomResizedCrop(crop_size),
            RandomHorizontalFlip(),
            ToTensor(),
            normalize,
        ]
    )

val_transforms = Compose(
        [
            Resize(size),
            CenterCrop(crop_size),
            ToTensor(),
            normalize,
        ]
    )

def preprocess_train(example_batch):
    """Apply train_transforms across a batch."""
    example_batch["pixel_values"] = [
        train_transforms(image.convert("RGB")) for image in example_batch["image"]
    ]
    return example_batch

def preprocess_val(example_batch):
    """Apply val_transforms across a batch."""
    example_batch["pixel_values"] = [val_transforms(image.convert("RGB")) for image in example_batch["image"]]
    return example_batch

train = data['train']
val = data['validation']

train.set_transform(preprocess_train)
val.set_transform(preprocess_val)

train[0]

from transformers import AutoModelForImageClassification, TrainingArguments, Trainer

model = AutoModelForImageClassification.from_pretrained(
    model_name,
    label2id=label2id,
    id2label=id2label,
    ignore_mismatched_sizes = True, # provide this in case you're planning to fine-tune an already fine-tuned checkpoint
)

model.to("cuda")

# model_name = model_checkpoint.split("/")[-1]

args = TrainingArguments(
    f"{model_name}-finetuned-table-data-version-2",
    remove_unused_columns=False,
    evaluation_strategy = "epoch",
    save_strategy = "epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=16,
    gradient_accumulation_steps=4,
    per_device_eval_batch_size=16,
    num_train_epochs=8,
    warmup_ratio=0.1,
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model="accuracy",
)

import numpy as np

def compute_metrics(eval_pred):
    """Computes accuracy on a batch of predictions"""
    predictions = np.argmax(eval_pred.predictions, axis=1)
    return metric.compute(predictions=predictions, references=eval_pred.label_ids)

import torch

def collate_fn(examples):
    pixel_values = torch.stack([example["pixel_values"] for example in examples])
    labels = torch.tensor([example["label"] for example in examples])
    return {"pixel_values": pixel_values, "labels": labels}

args.device

trainer = Trainer(
    model,
    args,
    train_dataset=train,
    eval_dataset=val,
    tokenizer=image_processor,
    compute_metrics=compute_metrics,
    data_collator=collate_fn,
)

train_results = trainer.train()
# rest is optional but nice to have
trainer.save_model()
trainer.log_metrics("train", train_results.metrics)
trainer.save_metrics("train", train_results.metrics)
trainer.save_state()

metrics = trainer.evaluate()
# some nice to haves:
trainer.log_metrics("eval", metrics)
trainer.save_metrics("eval", metrics)

"""## Inference"""

from transformers import AutoModelForImageClassification, AutoImageProcessor

# repo_name = "/content/drive/MyDrive/assignment/google/vit-base-patch16-224-in21k-finetuned-eurosat"
repo_name = "/content/drive/MyDrive/assignment/google/vit-base-patch16-224-in21k-finetuned-table-data-version-2"

image_processor = AutoImageProcessor.from_pretrained(repo_name)
modelfinetuned = AutoModelForImageClassification.from_pretrained(repo_name)

test = data['test']

test[201]['image']

test[101]


from tqdm.auto import tqdm

true = []
predicted = []
for i in tqdm(range(len(test))):
  encoding = image_processor(test[i]['image'].convert("RGB"), return_tensors="pt")
    # forward pass
  with torch.no_grad():
      outputs = modelfinetuned(**encoding)
      logits = outputs.logits
  predicted_class_idx = logits.argmax(-1).item()
  predicted.append(predicted_class_idx)
  true.append(test[i]['label'])

!pip install -q scikit-learn

from sklearn.metrics import accuracy_score, confusion_matrix

# Calculate accuracy
accuracy = accuracy_score(true, predicted)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Calculate confusion matrix
conf_matrix = confusion_matrix(true, predicted)
print("Confusion Matrix:")
print(conf_matrix)

